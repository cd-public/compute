18.404/6.840  Lecture 17

Last time:
- Cook-Levin Theorem:  !"# is NP-complete
- 3!"# is NP-complete

Today:  (Sipser §8.1 – §8.2)
- Space complexity
- SPACE  % &
- PSPACE, NPSPACE
- Relationship with TIME classes
- Examples

, NSPACE  % &

1

SPACE Complexity

Defn:  Let  !:  ℕ → ℕ where ! %  ≥ %.  Say TM ' runs in space !(%) if '
always halts and uses at most !(%) tape cells on all inputs of length %.

An NTM ' runs in space !(%) if all branches halt and each branch uses at
most !(%) tape cells on all inputs of length %.

Defn: SPACE ! % = {,| some deterministic 1-tape TM ' decides ,

Check-in 17.1
We define space complexity for multi-tape TMs by
taking the sum of the cells used on all tapes.

NSPACE ! % = {,| some nondeterministic 1-tape TM ' decides ,

Do we get the same class PSPACE for multi-tape TMs?

and ' runs in space . ! % }
(a)  No.
(b)  Yes, converting a multi-tape TM to single-tape
only squares the amount of space used.
(c)  Yes, converting a multi-tape TM to single-tape
only increases the amount of space used by a
constant factor.

“nondeterministic polynomial space”

and ' runs in space . ! % }

“polynomial space”

PSPACE = ⋃1 SPACE(%1)
NPSPACE = ⋃1 NSPACE(%1)

2

Check-in 17.1

Relationships between
Time and SPACE Complexity

Theorem:  For ! "  ≥ "

1)  TIME  ! "  ⊆ SPACE  ! "
2)  SPACE  ! "  ⊆ TIME  2&  '  (

= ⋃+ TIME  ,'  (

Proof:

1)  A TM that runs in !(") steps cannot use more than !(") tape cells.
2)  A TM that uses !(") tape cells cannot use more than ,'  (  time
without repeating a configuration and looping (for some ,).

Corollary:  P ⊆ PSPACE

Theorem:  NP ⊆ PSPACE  [next slide]

3

NP ⊆ PSPACE

Theorem:  NP ⊆ PSPACE
Proof:
1.  "#$ ∈ PSPACE
2.

If # ≤'  ( and ( ∈ PSPACE  then # ∈ PSPACE

Defn:  coNP =  # # ∈ NP}
*#+,#$* ∈ coNP
$#-$./.01 =  2  all assignments satisfy 2} ∈ coNP

PSPACE

coNP

NP

coNP ⊆ PSPACE  (because PSPACE = coPSPACE)

P = PSPACE ?  Not known.

Or possibly:

P

P =  NP = coNP = PSPACE

4

Example:  !"#$

Defn:  A quantified Boolean formula (QBF) is a Boolean formula
with leading exists (∃&) and for all (∀&) quantifiers.  All variables
must lie within the scope of a quantifier.

A QBF is TRUE or FALSE.

Examples:  () = ∀& ∃+  & ∨ +  ∧  & ∨ +
(. = ∃+ ∀&  & ∨ +  ∧  & ∨ +

TRUE
FALSE

Defn:  !"#$ =  (  ( is a QBF that is TRUE}

Thus ()  ∈ !"#$ and (.  ∉ !"#$.

Theorem:  !"#$ ∈ PSPACE

Check-in 17.2
How is 23! a special case of !"#$?
(a)  Remove all quantifiers.
(b)  Add ∃ and ∀ quantifiers.
(c)  Add only ∃ quantifiers.
(d)  Add only ∀ quantifiers.

5

Check-in 17.2

!"#$ ∈ PSPACE

Theorem:  !"#$ ∈ PSPACE
Proof:  “On input 〈'〉

1.  If ' has no quantifiers, then ' has no variables

so either ' = True or ' = False.  Output accordingly.

2.  If ' = ∃+ , then evaluate , with + = TRUE and + = FALSE recursively.

Accept if either accepts.  Reject if not.

3.  If ' = ∀+ , then evaluate , with + = TRUE and + = FALSE recursively.

Accept if both accept.  Reject if not.”

Space analysis:

Each recursive level uses constant space (to record the + value).
The recursion depth is the number of quantifiers, at most . = | '  |.

So !"#$ ∈  SPACE(.)

6

Example:  Ladder Problem

A word ladder for English is a ladder of English words.

Let ! be a language.  A ladder in ! is a ladder of strings in !.

A ladder is a sequence of strings of a common length where
consecutive strings differ in a single symbol.

WORK
PORK
PORT
SORT
SOOT
Defn:  "!##$%DFA  =  *, ,, - * is a DFA and "(*) contains  SLOT
a ladder 01, 02, … , 04  where 01  = , and 04  = -}.
PLOT
PLOY
PLAY
PLAY

Theorem:  "!##$%DFA ∈ NPSPACE

7

!"##$%DFA ∈ NPSPACE

Theorem:  !"##$%DFA ∈ NPSPACE
Proof idea:  Nondeterministically guess the sequence from * to +.

Careful- (a) cannot store sequence, (b) must terminate.

Proof:  “On input  ,, *, +

1.  Let . = * and let 0 = |*|.
2.  Repeat at most 2 times where 2 =  Σ
Nondeterministically change one symbol in ..
3.
Reject if . ∉ !(,).
4.
Accept if . = +.
5.
6.  Reject  [exceeded 2 steps].

4
.

Space used is for storing . and 2.
!"##$%DFA ∈ NSPACE(8).

Theorem:  !"##$%DFA ∈ PSPACE  (!)

*

+

.

2

8

:(8)

8

WORK
PORK
PORT
SORT
SOOT
SLOT
PLOT
PLOY
PLAY

≤ 2

˽  ˽

!"##$%DFA ∈ PSPACE

Theorem:  !"##$%DFA ∈  SPACE(+,)
Proof:  Write .
Here’s a recursive procedure to solve the bounded DFA ladder problem:

0  if there’s a ladder from . to 0 of length ≤ 2.

/

3456#$#-!"##$%DFA =  3, ., 0, 2  3 a DFA and .

0 by a ladder in !(3)}

/

3-! = “On input  3, ., 0, 2  Let  : =  .  = |0|.

1.  For 2 = 1, accept if ., 0 ∈ !(3) and differ in  ≤ 1 place, else reject.
2.  For 2 > 1, repeat for each > of length |.|

Recursively test .
Accept both accept.

3.
4.
5.  Reject [if all fail].”

//,

//,

> and >

0

[division rounds up]

Test  3, ., 0  ∈ !"##$%DFA with 3-! procedure on input  3, ., 0, @  for @ =  Σ
Space analysis:

B

Each recursive level uses space 4 +
Recursion depth is log @ = 4  :  = 4(+).

(to record >).

Total space used is 4(+,).

9

WORK

recurse

Check-in 17.3
Find an English word ladder
connecting MUST and VOTE.

⁄G
,

ABLE
AAAA
AABB
AABA
AAAZ
AAAD
AAAC
AAAB

@

(a)  Already did it.

(b)  I will.
recurse

⁄G
,

PLAY

Check-in 17.3

Quick review of today

1.  Space complexity

2.  SPACE  ! "

, NSPACE  ! "

3.  PSPACE, NPSPACE

4.  Relationship with TIME classes

5.  $%&' ∈ PSPACE

6.  )*++,-DFA ∈  NSPACE(")
7.  )*++,-DFA ∈  SPACE("3)

10

MIT OpenCourseWare
https://ocw.mit.edu

18.404J / 18.4041J / 6.840J Theory of Computation
Fall 2020

For information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms.

