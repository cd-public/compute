18.404/6.840  Lecture 5

Last time:
- Context free grammars (CFGs)
- Context free languages (CFLs)
- Pushdown automata (PDA)
- Converting CFGs to PDAs

Today:  (Sipser §2.3, §3.1)
- Proving languages not Context Free
- Turing machines
- T-recognizable and T-decidable languages

1

Equivalence of CFGs and PDAs

Recall Theorem:  ! is a CFL  iff  some PDA recognizes !

Done.
Need to know the fact, not the proof

Corollaries:
1)  Every regular language is a CFL.
2)
Proof sketch of (2):
While reading the input, the finite control of the PDA for ! simulates the DFA for ".

If ! is a CFL and " is regular then ! ∩ " is a CFL.

Note 1:  If ! and " are CFLs then ! ∩ " may not be a CFL (will show today).
Therefore the class of CFLs is not closed under ∩.

Note 2:  The class of CFLs is closed under ∪,∘,∗  (see Pset 2).

2

Proving languages not Context Free

Let  ! =  0$1$2$  ' ≥ 0}.  We will show that ! isn’t a CFL.

Pumping Lemma for CFLs:  For every CFL *, there is a +
such that if  , ∈ *  and  ,  ≥ +  then  , = ./012  where
1)  ./30132 ∈ *  for all 4 ≥ 0
2)  /1 ≠ ε
3)  /01 ≤ +

Informally:  All long strings in * are pumpable and stay in *.

≥ +

, =

.

/

0

1

2

∈ *

.

/  /

0
≤ +

1

1

2

∈ *

3

Pumping Lemma – Proof

Pumping Lemma for CFLs:   For every CFL !, there is a "
such that if  # ∈ !  and  #  ≥ "  then  # = '()*+  where
1)  '(,)*,+ ∈ !  for all - ≥ 0
2)  (* ≠ ε
3)  ()*  ≤ "

Proof by picture:

# =

'

(

E

R

R

)

E

R

R

'

(

R

)

(

*

+

*

Generates  '(()**+
= '( 1)*1+

E

R

)

'

Generates  ')+
= '( 2)*2+

+

*

+

Long # →
tall parse tree

“cutting and pasting” argument

4

Pumping Lemma – Proof details

For ! ∈ # where  !  ≥ %, we have  ! = '()*+  where:
1)  '(,)*,+ ∈ #  for all - ≥ 0
…cutting and pasting
2)  (* ≠ ε
…start with the smallest parse tree for !
3)  ()*  ≤ %
…pick the lowest repetition of a variable

Let 1 = the length of the longest right hand side of a rule

(E → E+T)

= the max branching of the parse tree

E

Let ℎ = the height of the parse tree for !.

E + T

A tree of height ℎ and max branching 1 has at most 14 leaves.
So  !  ≤ 14 .

Let % = 1  + 1  where  8  = # variables in the grammar.

5

So if  !  ≥ % > 1

5

then  !  > 1

|5|

and so  ℎ >  8

.

Thus at least  8  + 1 variables occur in the longest path.
So some variable ; must repeat on a path.

! =

'

5

E

R

R

want
ℎ >  8

*

(
)
use  !  > 1 5
set  % = 1 5 + 1

+

Example 1 of Proving Non-CF

Pumping Lemma for CFLs:   For every CFL 7, there is a *
such that if  + ∈ 7  and  +  ≥ *  then  + = ./012  where
1)  ./80182 ∈ 7  for all 9 ≥ 0
2)  /1 ≠ ε
3)  /01  ≤ *

Let  ! =  0$1$2$  ' ≥ 0}
Show:  ! is not a CFL

Proof by Contradiction:
Check-in 5.1
Assume (to get a contradiction) that ! is a CFL .
Let 7;  =  0$1$2<  ', > ≥ 0}  (equal #s of 0s and 1s)
The CFL pumping lemma gives * as above. Let + = 0,1,2, ∈ !.
Let 74  =  0<1$2$  ', > ≥ 0}  (equal #s of 1s and 2s)
Pumping lemma says that can divide + = ./012 satisfying the 3 conditions.
Observe that PDAs can recognize 7; and 74.  What can we now conclude?
Condition 3 ( /01 ≤ *) implies that /01 cannot contain both 0s and 2s.
So ./40142 has unequal numbers of 0s, 1s, and 2s.
a)  The class of CFLs is not closed under intersection.
Thus ./40142 ∉ !, violating Condition 1. Contradiction!
b)  The Pumping Lemma shows that 7; ∪ 74 is not a CFL .
Therefore our assumption (! is a CFL) is false. We conclude that ! is not a CFL .
c)  The class of CFLs is closed under complement.

+ =  00 ⋯ 0011 ⋯ 1122 ⋯ 22

.

1

/  0
≤ *

2

6

Check-in 5.1

Example 2 of Proving Non-CF

Pumping Lemma for CFLs:   For every CFL 8, there is a -
such that if  . ∈ 8  and  .  ≥ - then  . = 23456  where
1)  23:45:6 ∈ 8  for all ; ≥ 0
2)  35 ≠ ε
3)  345  ≤ -
Let ! =  ##  # ∈ Σ∗} .  Σ = {0,1}.
Show:  ! is not a CFL.

ut ./ can be pumped and stay inside !. Bad choice of ..

Assume (for contradiction) that ! is a CFL.
The CFL pumping lemma gives - as above.  Need to choose . ∈ !.  Which .?
Try ./  = 001001 ∈ !.  B
Try .1  = 00100010  ∈ !.
Show .1 cannot be pumped  .1  = 23456  satisfying the 3 conditions.
Condition 3 implies that 345 does not overlap two runs of 0s or two runs of 1s.
Therefore, in 2314516, two runs of 0s or two runs of 1s have unequal length.
So 2314516 ∉ ! violating Condition 1.  Contradiction!  Thus ! is not a CFL.

7

./  =  000 ⋯ 001000 ⋯ 001

2

3 4 5

6

.1  = 0 ⋯ 01 ⋯ 10 ⋯ 01 ⋯ 1
3

2

4

5

6

Turing Machines (TMs)

head

a b a
b  b
read/write input tape

˽  ˽

. . .

Finite
control

1)  Head can read and write

2)  Head is two way (can move left or right)

3)  Tape is infinite (to the right)

4)

Infinitely many blanks “˽“ follow input

5)  Can accept or reject any time (not only at end of input)

8

TM – example

TM recognizing  ! =  a#b#c#  $ ≥ 0
1)  Scan right until  ˽  while checking if input is in  a ∗ b ∗ c , reject if not.
2)  Return head to left end.

∗

3)  Scan right, crossing off single a, b, and c.

4)

5)

If the last one of each symbol, accept.

If the last one of some symbol but not others, reject.

Finite
control

If all symbols remain, return to left end and repeat from (3).

6)
Check-in 5.2
How do we get the effect of “crossing off” with a Turing machine?

a)  We add that feature to the model.
b)  We use a tape alphabet Γ = {a, b, c, a, b, c, ˽ }.
c)  All Turing machines come with an eraser.

head

input tape

a a a b b b c

c  c

˽  ˽

accept

9

Check-in 5.2

TM – Formal Definition

input alphabet

Defn:  A Turing Machine (TM) is a 7-tuple  (", Σ, Γ, &, '(, 'acc , 'rej)
Σ
Γ  tape alphabet  (Σ ⊆ Γ)
&:  Q×Γ → "×Γ× {L, R}
&  ', a  = (5, b, R)

(L = Left,  R = Right)

On input 6 a TM 7 may halt (enter 'acc  or  'rej)
or 7 may run forever (“loop”).

So 7 has 3 possible outcomes for each input 6:
1.  Accept 6 (enter 'acc )
2.  Reject 6 by halting  (enter 'rej )
3.  Reject 6 by looping  (running forever)

Check-in 5.3
This Turing machine model is deterministic.
How would we change it to be nondeterministic?

a)  Add a second transition function.
b)  Change & to be &:  Q×Γ → 8( "×Γ× {L, R} )
c)  Change the tape alphabet Γ to be infinite.

10

Check-in 5.3

TM Recognizers and Deciders

Let ! be a TM.  Then " !  = $ ! accepts $}.
Say that ! recognizes & if  & = "(!).
Defn:  & is Turing-recognizable if & = "(!) for some TM !.

Defn:  TM ! is a decider if ! halts on all inputs.

T-recognizable

Say that ! decides &  if  & = "(!)  and ! is a decider.
Defn:  & is Turing-decidable if & = "(!) for some TM decider !.

T-decidable

CFLs

regular

11

Quick review of today

1.  Proved  the  CFL  Pumping Lemma as a tool

for  showing  that  languages  are  not  context
free.

2.  Defined Turing machines (TMs).

3.  Defined TM deciders (halt on all inputs).

4.  T-recognizable  and  T-decidable languages.

12

MIT OpenCourseWare
https://ocw.mit.edu

18.404J / 18.4041J / 6.840J Theory of Computation
Fall 2020

For information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms.

