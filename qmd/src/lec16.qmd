18.404/6.840  Lecture 16

Last time:
- NP-completeness
- 3"#$ ≤P  &'()*+
- 3"#$ ≤P  ,#-.#$,

Today:  (Sipser §7.4)
- Cook-Levin Theorem:  "#$ is NP-complete
- 3"#$ is NP-complete

1

Quick Review

Defn:  ! is NP-complete if
1)  ! ∈ NP
2)  For all # ∈ NP,  # ≤%  !

If ! is NP-complete and ! ∈ P then P = NP.

Importance of NP-completeness
1)  Evidence of computational intractability.
2)  Gives a good candidate for proving P ≠ NP.

To show some language ( is NP-complete,
show  3*#+ ≤%  (.

or some other previously shown
NP-complete language

NP

≤% *#+ ≤% 3*#+ ≤% (,-./0

Check-in 16.1
today
The big sigma notation means summing over some set.
≤% */!*0+-*/1
≤% 2#13#+2
The big AND (or OR) notation has a similar meaning.
For example, if ? = ?5 ⋯ ?8 and @ = @5 ⋯ @8 are two
NP
strings of length >, when does the following hold?

4  9 = 1 + 2 + ⋯ + >

previously

recitation

56768

≤% /2#13#+2

P

A  ?7 = @7  = TRU E
56768

NP-complete

(a)  Whenever ? and @ agree on some symbol.
(b)  Whenever ? = @.

P = NP

Or:

2

Check-in 16.1

Cook-Levin Theorem (idea)

Theorem:  !"# is NP-complete
Proof:  1)  !"# ∈ %&  (done)

2)  Show that for each " ∈ %& we have " ≤(  !"#:

Let " ∈ %& be decided by NTM ) in time *+ .
Give a polynomial-time reduction , mapping " to !"#.

,:  Σ∗ →  formulas
,  1  =  〈45,7〉
1 ∈ "  iff  45,7  is satisfiable

Idea:  45,7  simulates ) on 1.  Design 45,7  to “say” ) accepts 1.
Satisfying assignment to 45,7  is a computation history for ) on 1.

3

Tableau for ! on "

Defn:  An (accepting) tableau for NTM ! on " is an #$×#$  table
representing an computation history for ! on " on an accepting branch
of the nondeterministic computation.

#$

"*  ⋯ ",  ˽  …  ˽

← Start configuration for ! on "

⋯

⋮

&'

a

"( ")
&
-

)

#$

Construct 45,7 to “say” ! accepts ".

45,7 “says” a tableau for ! on " exists.

45,7  = 4cell  ∧  4start  ∧  4move  ∧  4accept

⋯  &accept  ⋯

← Accepting configuration

4

1

FG

Constructing !",$:  !start and !accept

2

3         ⋯

1               ⋯
1
?@ -5 -8 -: ⋯ -=
a ?A -8

⋯

FG
FG

˽   …  ˽ ← Start configuration

⋯ ?accept ⋯

← Accepting configuration

!",$ “says” a tableau for , on - exists.

!",$ = !cell ∧ !start ∧ !move ∧ !accept

!cell done •

!start = 45,5,67 ∧ 45,8,$9 ∧ 45,:,$; ∧ ⋯ ∧ 45,=>,˽

!accept =

B

4=>,D,6accept

5CDC=>

6

Constructing !",$:  !move

M
˽   …  ˽

45 *6 *7 *8 ⋯ *:
a 4; *7

⋯

2×3 neighborhood

L

⋯ 4accept ⋯

!",$ “says” a tableau for ) on * exists.

!",$ = !cell ∧ !start ∧ !move ∧ !accept

•

•

•

Legal neighborhoods:  consistent with )’s transition function

potential
examples:

a 4; b
48
c
a

a b c

a b c

a b c
a b 4?

a b c

d b c

Illegal neighborhoods: not consistent with )’s transition function

examples:

a b c

a d c

a b c
a 47

c

c

a 4;
a b c

a 4;
c
48 d 4@

Claim:  If every 2×3 neighborhood is legal then tableau
corresponds to a computation history.

!move = I

6JE,FJ:K

C DE,FG6,r ∧ DE,F,s ∧ DE,FH6,t ∧ DEH6,FG6,v ∧ DEH6,F,y ∧ DEH6,FH6,z
Legal

Says that the neighborhood at L, M is legal

r s t

v y z

7

Conclusion:  !"# is NP-complete

23

$% &' &( &) ⋯ &+
a $, &(

⋯

˽    …  ˽

23

⋯ $accept ⋯

Summary:
For " ∈ NP, decided by NTM 5,
we gave a reduction 6 from " to !"#:

6: Σ∗ → formulas
6 & = 〈=>,@〉
& ∈ " iff  =>,@ is satisfiable.

=>,@ = =cell ∧ =start ∧ =move ∧ =accept

The size of =>,@ is roughly the size of the tableau
for 5 on &, so size is I 23×23 = I 2(3 .

Therefore 6 is computable in polynomial time.

8

3"#$ is NP-complete

Theorem:  3"#$ is NP-complete
Proof:  Show "#$ ≤& 3"#$

a   b    a ∧ b = c
a   b    a ∨ b = c
1   1       1
1   1       1
0   1       0
0   1       1
1   0       1
1   0       0
0   0       0
0   0       0

a ∧ b → c
a ∧ b → c
a ∧ b → c
a ∧ b → c
a ∧ b → c
a ∧ b → c
a ∧ b → c
a ∧ b → c

Give reduction ' converting formula ( to 3CNF formula (′, preserving satisfiability.
(Note: ( and (′ are not logically equivalent)

Example:  Say ( = a ∧ b ∨ c ∧ a ∨ b
Tree structure for (:

-1

∧

-/

∨

∨

-0

-.

∧

c

a

b

a

b

Logical equivalence:   # → 9 and   # ∨ 9

# ∧ 9 and   # ∨ 9

(2 = a ∧ b → -. ∧

a ∧ b → z. ∧

a ∧ b → z. ∧

a ∧ b → z.

∧

-. ∧ c → -/ ∧ z. ∧ c → -/ ∧
⋮

repeat for each -5

-. ∧ c → -/ ∧

z. ∧ c → z/

∧ (-1)

Observe that  a ∧ b → c is logically equivalent to  a ∨ b ∨ c

Check-in 16.3
If ( has : operations (∧ and ∨), how many clauses has (’?
(c)    :/
(a) : + 1
(d)   2:/
(b) 4: + 1

a ∧ b → c ↔ a ∧ b ∨ c ↔ a ∨ b ∨ c ↔ a ∨ b ∨ c

9

Check-in 16.3

Quick review of today

1.

2.

!"# is NP-complete

3!"# is NP-complete

10

MIT OpenCourseWare
https://ocw.mit.edu

18.404J / 18.4041J / 6.840J Theory of Computation
Fall 2020

For information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms.

