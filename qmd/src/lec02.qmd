18.404/6.840  Lecture 2

Last time:  (Sipser §1.1)
- Finite automata, regular languages
- Regular operations  ∪,∘,∗
- Regular expressions
- Closure under ∪

Today:  (Sipser §1.2 – §1.3)
- Nondeterminism
- Closure under  ∘ and ∗
- Regular expressions → finite automata
Goal:  Show finite automata equivalent to regular expressions

1

Problem Sets

- 35% of overall grade

- Problems are hard!  Leave time to think about them.

- Writeups need to be clear and understandable, handwritten ok.

Level of detail in proofs comparable to lecture:  focus on main ideas.
Don’t need to include minor details.

- Submit via gradescope (see Canvas) by 2:30pm Cambridge time.

Late submission accepted (on gradescope) until 11:59pm following day:
1 point (out of 10 points) per late problem penalty.
After that solutions are posted so not accepted without S3 excuse.

- Optional problems:

Don’t count towards grade except for A+.
Value to you (besides the challenge):
Recommendations, employment (future grading, TA, UROP)

- Problem Set 1 is due in one week.

2

Closure Properties for Regular Languages

Theorem:  If  !",  !$  are regular languages, so is !"!$  (closure under ∘)

Recall proof attempt:  Let &"  = ()", Σ, +" , ," , -" )  recognize !"
&$  = ()$, Σ, +$ , ,$ , -$ ) recognize !$

Construct  &  =  () , Σ , + , ,0, - ) recognizing !"!$

&$

&"

&

&  should accept input  0
if 0 = 12  where

&" accepts 1  and  &$ accepts 2.

0

1

2

Doesn’t work:  Where to split 0?

Hold off.  Need new concept.

3

Nondeterministic Finite Automata

!1

a

#1

a

b

b

#2

#3

a,ε

#4

New features of nondeterminism:
- multiple paths possible (0, 1 or many at each step)
- ε-transition is a “free” move without reading input
- Accept input if some path leads to

accept

Example inputs:
- ab
accept
- aa
reject
- aba
- abb

accept
reject

Check-in 2.1

What does !' do on input  aab ?
(a)  Accept
(b)  Reject
(c)  Both Accept and Reject

Nondeterminism doesn’t
correspond to a physical machine
we can build. However, it is useful
mathematically.

4

Check-in 2.1

NFA – Formal Definition

!1

a

#1

a

b

b

#2

#3

a,ε

#4

Defn:  A nondeterministic finite automaton  (NFA)
! is a 5-tuple ((, Σ, +, #0, -)

sta

a
tr  sta
al
c
c
a
p
e
n  r
t  h
s  t
p
i
e  a
t
ti
sta
s  e  o
b
s
t
t
te  te
a
n
f
u
s
n
ctio

- all same as before except +
- +: (×Σε  → 2  (  =  4 4 ⊆ (}

n

power set

Σ ∪ {ε}

- In the !7 example:  +  #7, a  = {#7, #9}

+  #7, b  = ∅

5

Ways to think about nondeterminism:

Computational:  Fork new parallel thread and
accept if any thread leads to an accept state.

Mathematical:  Tree with branches.
Accept if any branch leads to an accept state.

Magical:  Guess at each nondeterministic step
which way to go.  Machine always makes the
right guess that leads to accepting, if possible.

Converting NFAs to DFAs

Theorem:  If an NFA recognizes ! then ! is regular

Proof:  Let  NFA  " = (%, Σ, (, )* , +)  recognize !

Construct  DFA  "′ = (%′, Σ, (′, )*

. , +′)  recognizing !

(Ignore the ε-transitions, can easily modify to handle them)

I D EA :   DFA "′ keeps track of the subset of possible states in  NFA ".

Check-in 2.2

"

)8

If " has : states, how many
states does "′ have by this
construction?
(a)  2:
(b)  :<
(c)  2=

)9

NFA

"′

{)8,)9}

DFA

6

Construction of /′:

%′ = 0  %

) ) ∈ ((4, 2) for some 4 ∈ 1}

(. 1, 2  =
1 ∈ %′
.  = {q*}
)*
+′ =  1 ∈ %.  1 intersects +}

Check-in 2.2

Return to Closure Properties

Recall Theorem:  If  !", !$  are regular languages, so is !" ∪ !$

(The class of regular languages is closed under union)

New Proof (sketch):  Given DFAs  &" and &$ recognizing !" and !$

Construct NFA  &  recognizing  !" ∪ !$

&

&"

ε

ε

&$

Nondeterminism
parallelism
vs
guessing

7

Closure under ∘  (concatenation)

Theorem:  If  "#, "%  are regular languages, so is "#"%

Proof sketch:  Given DFAs &# and &# recognizing "# and "%

Construct NFA & recognizing "#"%

&

&#

&%

ε

ε

8

&  should accept input  '
if ' = )*  where

&# accepts )  and  &% accepts *.

' =

)

*

Nondeterministic &′ has the option
to jump to &%  when &#  accepts.

Closure under ∗  (star)

Theorem:  If " is a regular language, so is  "∗

Proof sketch:  Given DFA #  recognizing  "
Construct NFA #′ recognizing "∗

#′

#

ε

ε

ε

Make sure #′ accepts ε

Check-in 2.3

#′ should accept input %

if % = '(') … '+
where , ≥ 0 and # accepts each '/

If # has 2 states, how many states
does #′ have by this construction?
(a)  2
(b)  2 + 1
% =
(c)  22

'0

')

'1

'(

9

Check-in 2.3

Regular Expressions → NFA

Theorem:  If " is a regular expr and # = %  "  then # is regular

Proof:  Convert " to equivalent NFA &:

Equivalent & is:
)

If " is atomic:
" = )  for  ) ∈ Σ
" = ε

" = ∅

If " is composite:
" = ". ∪ "/
" = ". ∘ "/
" = ".

}∗

Use closure constructions

10

Example:
Convert  a ∪ ab  ∗ to equivalent NFA
a:

a

b

b:

ab:
a ∪ ab:

a ∪ ab  ∗ :
ε

a

ε

b

a
a

ε

ε

ε

a
a

ε

ε

ε

b

ε

b

ε

Quick review of today

1.  Nondeterministic finite automata (NFA)

2.  Proved:  NFA  and  DFA  are  equivalent in  power

3.  Proved:  Class of regular languages is closed  under ∘,∗

4.  Conversion of regular expressions to NFA

Check-in 2.4

Recitations start tomorrow online (same link as for lectures).
They are optional, unless you need more help.
You may attend any recitation(s).
Which do you think you’ll attend?  (you may check several)
(c)  12:00
(a)  10:00
(f)  I prefer a different time (please
(d)  1:00
post on piazza, but no promises)

(b)  11:00
(e)  2:00

Check-in 2.4

11

MIT OpenCourseWare
https://ocw.mit.edu

18.404J / 18.4041J / 6.840J Theory of Computation
Fall 2020

For information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms.

