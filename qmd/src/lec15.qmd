18.404/6.840  Lecture 15

Last time:
- NTIME  ! "
, NP
- P vs NP problem
- Dynamic Programming, #CFG ∈ P
- Polynomial-time reducibility

Today:  (Sipser §7.5)
- NP-completeness

1

Quick Review

Defn:  ! is polynomial time reducible to "  (! ≤$  ")  if  ! ≤%  "
by a reduction function that is computable in polynomial time.

Theorem:  If ! ≤$  "  and  " ∈ P  then  ! ∈ P.

!

'

"

' is computable in polynomial time

NP = All languages where can verify membership quickly
P  = All languages where can  test  membership quickly

P versus NP question:  Does P = NP?

(!) =  +  + is a satisfiable Boolean formula}

?

P

NP

P = NP

Cook-Levin Theorem:  (!) ∈ P  →  P = NP
Proof plan:  Show that every  ! ∈ NP  is polynomial time reducible to (!).

2

≤" Example:  3$%& and '()*+,

Defn:  A Boolean formula - is in Conjunctive Normal Form (CNF) if it
has the form  - =  / ∨ 1 ∨ 2  ∧  / ∨ 4 ∨ 2 ∨ 5  ∧ ⋯ ∧  (2 ∨ 5)

clause

clause

literals

Literal:  a variable or a negated variable
Clause:  an OR (∨) of literals.
CNF:  an AND (∧) of clauses.
3CNF:  a CNF with exactly 3 literals in each clause.
3$%& =  - - is a satisfiable 3CNF formula}

Defn:  A 9-clique in a graph is a subset of k nodes all directly connected by edges.
'()*+, =  ;, 9  graph ; contains a 9-clique}

3-clique

Will show:  3$%& ≤"  '()*+,

3

4-clique

5-clique

3"#$ ≤& '()*+, conclusion

- = / ∨ 1 ∨ 2 ∧ / ∨ 1 ∨ 4 ∧ / ∨ 2 ∨ 5 ∧ ⋯ ∧ 7 ∨ 8 ∨ 9

>

:
;

/

2

/

4

/

5

=
1
= # clauses

1

2

. . .

7

9

8

Claim:  - is satisfiable  iff  : has a ;-clique
(→)  Take any satisfying assignment to -.  Pick 1 true literal in each clause.

The corresponding nodes in G are a ;-clique because they don’t have forbidden edges.

(←)  Take any ;-clique in :.  It must have 1 node in each clause.

Set each corresponding literal TRUE.   That gives a satisfying assignment to -.

The reduction > is computable in polynomial time.

Corollary:   '()*+, ∈ P → 3"#$ ∈ P

5

Check-in 15.1
Does this proof require
3 literals per clause?

(a) Yes, to prove the

claim.

(b) Yes, to show it is
in poly time.

(c) No, it works for
any size clauses.

Check-in 15.1

NP-completeness

Defn:  ! is NP-complete if
1) ! ∈ NP
2)

For all # ∈ NP,  # ≤% !

If ! is NP-complete and ! ∈ P then P = NP.

NP

Cook-Levin Theorem:  '#( is NP-complete
Proof:  Next lecture; assume true

next lecture

≤% '#( ≤% 3'#( ≤% +,-./0

today

≤% 2#34#(2

To show some language + is NP-complete,
show  3'#( ≤1 +.

Check-in 15.2
Importance of NP-completeness
What language that we’ve previously seen is
1)  Showing ! is NP-complete is evidence of computational intractability.
most analogous to '#(?
2)  Gives a good candidate for proving P ≠ NP.
(a) #TM
(b) 0TM
(c)

0616 8 ≥ 0}

6

or some other previously shown
NP-complete language

Check-in 15.2

!"#$"%! is NP-complete

Theorem:  !"#$"%! is NP-complete
Proof:  Show 3'"% ≤) !"#$"%! (assumes 3'"% is NP-complete)
Idea:  “Simulate” variables and clauses with “gadgets”

* = ,- ∨ ,/ ∨ ,0 ∧ ,- ∨ ,/ ∨ ,2 ∧ ⋯ ∧

4

〈6, 8, 9〉

,-

8

. . .

clause gadget

variable gadget

Zig-zag
Zag-zig

Corresponds to setting ,- TRUE
Corresponds to setting ,- FALSE

7

Construction of !

( = "# ∨ "$ ∨ "+ ∧ "# ∨ "$ ∨ "- ∧ ⋯ ∧

0#

0$

"%
04

5 variables
6 clauses

0#

0$

i n   0 #

" # p o s i t i v e
. . .

d  i n   0

#

e

t

a

g

e

n

"

$

"# negated in 0$

!

"#

"$

"%

&

'

.

.

.

. . .

. . .

. . .

. . .

.

.

.

04

The reduction 3 is computable
in polynomial time.

Claim:   ( is satisfiable  iff  ! has a Hamiltonian path from & to '.
(→)  Take any satisfying assignment to (.

Check-in 15.3
Would this construction still work if we made ! undirected by changing
all the arrows to lines?  In other words, would this construction show that
Make corresponding zig-zags and zag-zigs through variable gadgets from & to '.
the undirected Hamiltonian path problem is NP-complete?
Make detours to visit the clause nodes 01.
(←)  Take any Hamiltonian path from & to '.
(a) Yes, the construction would still work.
Show it must be zig-zags and zag-zigs with detours to visit all 01.
(b) No, the construction depends on ! being directed.
Get corresponding truth asst.  It must satisfy ( because path visits all 01.

Check-in 15.3

8

Quick review of today

1. NP-completeness

2.

3.

4.

5.

!"# and 3!"#

3!"# ≤& '"()"#'

3!"# ≤& *+,-./

Strategy for proving NP-completeness:  Reduce
from 3!"# by constructing gadgets that
simulate variables and clauses.

9

MIT OpenCourseWare
https://ocw.mit.edu

18.404J / 18.4041J / 6.840J Theory of Computation
Fall 2020

For information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms.

