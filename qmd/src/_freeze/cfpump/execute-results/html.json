{
  "hash": "e6498ed3d2ba1c4af6d470c9f8f45912",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Context Free Pumping\"\nauthor: Prof. Calvin\nsubtitle: \"Sat 11:30 AM\"\ninstitute: CSCI 5100\nformat: \n    revealjs: \n        incremental: true\n        theme: dark\n        mainfont: monospace\n        slide-number: true\n        show-slide-number: all\n        width: 1050\n        height: 700\n        footer: \"[Home](../index.html)\"\n  \nexecute:\n    echo: true\n    cache: true\n    freeze: true  # never re-render during project render\n\n---\n\n\n\n## Sketch\n\n::: {.nonincremental}\n- CF Pumping Lemma\n  - Statement\n  - Examples\n:::\n\n# Preface\n\n## Avoid this trap\n\n- Suppose we wish to prove a language is not a context free language\n- We must prove there is no CFG/PDA that recognizes the language.\n- It may be tempting to conclude:\n  - I thought about it really hard.\n  - I could find no PDA/CFG\n  - Therefore the language is not a context free language.\n\n## Example\n\n- Take $\\Sigma = \\{0,1,2\\}$\n- Take $B = \\{0^k1^k2^k| k \\in \\mathbb{N}\\}$\n- This language is not a context free language.\n  - If you had a stack, match `0`s with `1`s\n  - How to deal with `2`s?\n  - Not a proof, but an intuition.\n\n# Pumping Lemma\n\n## Regular Pumping Lemma\n\n$$\n\\begin{aligned}\n&\\forall A:\\exists p \\in \\mathbb{N} : \\\\\n&\\exists xyz \\in A : |xyz| \\geq p \\implies\n\\\\\n&\\forall i \\in \\mathbb{N} : xy^iz \\in A \\land \\\\\n&|y| > 0 \\land \\\\\n&|xy| \\leq p\n\\end{aligned}\n$$\n\n- That is, $\\{xz, xyz, xyyz\\} \\in A$\n- We \"pump up\" the number of occurances of `y`\n\n## Context Free Pumping Lemma\n\n$$\n\\begin{aligned}\n&\\forall \\text{ CFL } A :\\exists p \\in \\mathbb{N} : \\\\\n&\\exists s = uvxyz \\in A : |uvxyz| \\geq p \\implies\n\\\\\n&\\forall i \\in \\mathbb{N} : uv^ixy^iz \\in A \\land \\\\\n&|vy| > 0 \\land \\\\\n&|vxy| \\leq p\n\\end{aligned}\n$$\n\n- That is, $\\{uxz, uvxyz, uvvxyyz\\} \\in A$\n- We \"pump up\" occurances of `v` and `y`\n\n## Sketch of Proof\n\n- We imagine an arbitrarily long string.\n  - We'll be precise latter.\n- The parse tree of a long string is very high.\n  - Recall parse trees:\n\n::: {.fragment}\n\n\n\n```{dot}\n// | echo: false\n// | fig-height: 200px\ndigraph finite_automata {\n  rankdir=TB; bgcolor=\"#191919\";  \n  node [fontcolor = \"#ffffff\", color = \"#ffffff\", fontsize=\"30\"]\n  edge [color = \"#ffffff\",fontcolor = \"#ffffff\"]\n\n  node [shape=plaintext];\n  1 [label=\"E\"]; \n\n  2 [label=\"E\"];\n  3 [label=\"+\"];\n  4 [label=\"E\"];\n\n  5 [label=\"a\"];\n  6 [label=\"E\"];\n  7 [label=\"Ã—\"];\n  8 [label=\"E\"];\n\n\n  1 -> 2\n  1 -> 3\n  1 -> 4\n\n  2 -> 5\n  4 -> 6\n  4 -> 7\n  4 -> 8\n\n}\n```\n\n\n\n:::\n\n## Checkin\n\n- Can a string of length 1 million be made my a parse tree of height 1?\n  - How about all factors of 1 million?\n- We'll quantify this shortly.\n\n:::{.fragment}\n\n$$\n\\begin{aligned}\n    &S \\rightarrow 0^{10^6} \\\\\n\\end{aligned}\n$$\n\n::: \n\n## Given a tall tree\n\n- Let's assume the tall tree\n- Each step in the tree involves variable substitution\n- So as soon as height is greater than the size of set of variables, we necessarily repeat some variable.\n\n## Tikz\n\n- I'm going to use a new tool to show the next bit: Tikz!\n  - Part of LaTeX\n  - Seems to run well inside of [R](https://cran.r-project.org/web/packages/tikzDevice/vignettes/tikzDevice.pdf)\n- Credit [LaTeX Graphics using TikZ](https://www.overleaf.com/learn/latex/LaTeX_Graphics_using_TikZ%3A_A_Tutorial_for_Beginners_(Part_1)%E2%80%94Basic_Drawing)\n- Credit [JBGruber](https://stackoverflow.com/a/71856388)\n\n## Example\n\n\n\n::: {.cell}\n\n```{.tex .cell-code}\n\\begin{tikzpicture}\n \\draw (0,0) circle (1cm);\n\\end{tikzpicture}\n```\n\n\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\n\n## Proof by Picture\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n:::\n\n\n## $s$ is long\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## Parse Tree\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## Begin with $E$\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n:::\n\n\n## Tree is tall\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## Take a Derivation\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## Necessary Repetition\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n:::\n\n\n## $R$ to $s$\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## $s$ to $uvxyz$\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## Displace the lowest $R$...\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-12-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## With the higher $R$...\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n:::\n\n## Side by side\n\n::::{.columns}\n\n:::{.column}\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::\n\n:::{.column}\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::\n\n::::\n\n- On the left we have $s = uvxyz$\n- On the right we have $s = uvvxyz = uv^2xy^2z$\n- Process is repeatable.\n\n\n## Deskew\n\n::::{.columns}\n\n:::{.column}\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::\n\n:::{.column}\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::\n\n::::\n\n## Code Reveal\n\n::::{.columns}\n\n:::{.column}\n\n```{.r}\n\\begin{tikzpicture}\n\\fill[darkgray!40!black] (0,0) rectangle (10,7);\n\\draw[white] (2,2) -- node[below,cyan] {u} ++(1,0)  -- node[below,cyan] {v} ++(1,0) ;\n\\draw[white] (4,2) -- node[below,cyan] {x} ++(2,0);\n\\draw[white] (6,2) -- node[below,cyan] {y} ++(1,0) -- node[below,cyan] {z} ++(1,0);\n\n\\draw[white] (5,5.5) -- node[below,cyan] {E} ++(0,0) ;\n\n\\draw[white] (5,4.5) -- node[below,cyan] {R} ++(0,0) ;\n\\draw[white] (5,3.5) -- node[below,cyan] {R} ++(0,0) ;\n\n\\draw[white] (2,2) -- (5,5) ;\n\\draw[white] (5,5) -- (8,2) ;\n\n\\draw[white] (3,2) -- (5,4) ;\n\\draw[white] (5,4) -- (7,2) ;\n\n\\draw[white] (4,2) -- (5,3) ;\n\\draw[white] (5,3) -- (6,2) ;\n\n\\end{tikzpicture}\n```\n\n:::\n\n:::{.column}\n\n```{.r}\n\\begin{tikzpicture}\n\\fill[darkgray!40!black] (0,0) rectangle (10,7);\n\\draw[white] (2,2) -- node[below,cyan] {u} ++(1,0)  -- node[below,cyan] {v} ++(1,0) ;\n\\draw[white] (6,2) -- node[below,cyan] {y} ++(1,0) -- node[below,cyan] {z} ++(1,0);\n\n\\draw[white] (5,5.5) -- node[below,cyan] {E} ++(0,0) ;\n\n\\draw[white] (5,4.5) -- node[below,cyan] {R} ++(0,0) ;\n\\draw[white] (5,3.5) -- node[below,cyan] {R} ++(0,0) ;\n\\draw[white] (5,2.5) -- node[below,cyan] {R} ++(0,0) ;\n\n\\draw[white] (2,2) -- (5,5) ;\n\\draw[white] (5,5) -- (8,2) ;\n\n\\draw[white] (3,2) -- (5,4) ;\n\\draw[white] (5,4) -- (7,2) ;\n\n\\draw[white] (3,1) -- (5,3) ;\n\\draw[white] (5,3) -- (7,1) ;\n\n\\draw[white] (4,1) -- (5,2) ;\n\\draw[white] (5,2) -- (6,1) ;\n\n\\draw[white] (3,1) -- node[below,cyan] {v} ++(1,0) -- node[below,cyan] {x} ++(2,0) -- node[below,cyan] {y} ++(1,0) ;\n\n\\end{tikzpicture}\n```\n\n:::\n\n::::\n\n## $uxz$\n\n::::{.columns}\n\n:::{.column}\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-18-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::\n\n:::{.column}\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::\n\n::::\n\n## Context Free Pumping Lemma\n\n::::{.columns}\n\n:::{.column}\n\n$$\n\\begin{aligned}\n&\\forall \\text{ CFL } A :\\exists p \\in \\mathbb{N} : \\\\\n&\\exists s = uvxyz \\in A : \\\\\n& |uvxyz| \\geq p \\implies\n\\\\\n&\\forall i \\in \\mathbb{N} : uv^ixy^iz \\in A \\land \\\\\n&|vy| > 0 \\land \\\\\n&|vxy| \\leq p\n\\end{aligned}\n$$\n\n\n:::\n\n:::{.column}\n\n*Proof*\n\n:::{.r-stack}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cfpump_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n:::\n\n:::\n\n::::\n\n## Details\n\n- Take $b$ maximum branch size\n- Take $h$ height parse tree\n- Need $|s| < b^h$\n- Let $p = b^{|V|}$\n  - $V$ is the set of variables.\n\n## All conditions\n\n- $uv^ixy^iz \\in A \\forall i \\in \\mathbb{N}$\n  -  Cut and paste\n- $vy \\neq \\varepsilon$\n  - Take smallest possible tree.\n- $|vxy| \\leq p$\n  - Pick lowest $R$\n\n## Example\n\n- Take $B = \\{0^k1^k2^k|k\\in\\mathbb{N}\\}$\n  - Need `0`, `1`, and `2` in $vxy$\n    - $|vxy| \\leq p$\n  - Pumping anything leads to unequal.\n  - Not in CFL by condition 3.\n\n<!-- https://www.youtube.com/watch?v=IycOPFmEQk8&t=2311s -->\n\n# Stretch Break\n\n- [Home](https://cd-public.github.io/compute/)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}