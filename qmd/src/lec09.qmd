18.404/6.840  Lecture 9

Last time:
- !TM is undecidable
- The diagonalization method
- !TM is T-unrecognizable
- The Reducibility Method, preview

Today:  (Sipser §5.1, §5.3)
- The Reducibility Method for proving undecidability

and T-unrecognizability.

- General reducibility
- Mapping reducibility

1

The Reducibility Method

If we know that some problem (say !TM) is undecidable,
we can use that to show other problems are undecidable.

Defn:  $!%&TM =  (, *  ( halts on input *}

Recall Theorem:  $!%&TM is undecidable
Proof by contradiction, showing that !TM is reducible to $!%&TM:
Assume that $!%&TM is decidable and show that !TM is decidable (false!).
Let TM , decide $!%&TM.
Construct TM - deciding !TM.
- = “On input  (, *

1.  Use , to test if ( on * halts.  If not, reject.
2.  Simulate ( on * until it halts (as guaranteed by ,).
3.  If ( has accepted then accept.
If ( has rejected then reject.

TM - decides !TM, a contradiction.  Therefore $!%&TM is undecidable.

2

Reducibility – Concept

If we have two languages (or problems) ! and ", then
! is reducible to " means that we can use " to solve !.

Example 1:  Measuring the area of a rectangle
is reducible to measuring the lengths of its sides.

Example 2:  We showed that !NFA is reducible to !DFA .

Example 3:  From Pset 2, PUSHER is reducible to 'CFG .
(Idea- Convert push states to accept states.)

If ! is reducible to " then solving " gives a solution to !.
- then " is easy → ! is easy.
- then ! is hard → " is hard.
this is the form we will use

Check-in 9.1
Is Biology reducible to Physics?

(a)  Yes, all aspects of the physical world
may be explained in terms of Physics,
at least in principle.

(b)  No, some things in the world, maybe
life, the brain, or consciousness,
are beyond the realm pf Physics.

(c)

I’m on the fence on this question!

3

Check-in 9.1

!TM is undecidable

Let  !TM = { &  | & is a TM and (  &  = ∅ }
Theorem: !TM  is undecidable
Proof by contradiction.  Show that +TM is reducible to !TM.
Assume that !TM is decidable and show that +TM is decidable (false!).
Let TM , decide !TM.
Construct TM - deciding +TM.
- = “On input  &, /

1.  Transform & to new TM &0  = “On input 1

1.  If 1 ≠ /, reject.
2.  else run & on /
3.  Accept if & accepts.”

2.  Use , to test whether ((&0)  = ∅
3.  If YES [so & rejects /] then reject.

If NO [so & accepts /] then accept.

4

&0 works like & except that it
always rejects strings 1 where  1 ≠ /.

So  ( &0  = 5

/
∅

if & accepts /
if  & rejects /

Mapping Reducibility

Defn:  Function !: Σ∗  → Σ∗ is computable if there is a TM &
where & on input ' halts with !(') on its tape, for all strings '.

Defn:  * is mapping-reducible to +  (* ≤- +) if there is
a computable function ! where ' ∈ *  iff  ! '  ∈ +.

'

*

!

! '

+

Example:  *TM  ≤- 1TM
The computable reduction function ! is !(  2, '  ) =  24
Because  2, '  ∈ *TM iff  24  ∈ 1TM

( 2 accepts '  iff  5  24  ≠ ∅ )

Recall TM 24  = “On input 9

1.  If 9 ≠ ', reject.
2.  else run 2 on '
3.  Accept if 2 accepts.”

5

Mapping Reductions - properties

Theorem:  If ! ≤#  $  and $ is decidable then so is !
Proof:  Say TM % decides $.
Construct TM & deciding !:
& = “On input (

!

)

$

1.  Compute )(()
( ∈ $
2.  Run % on )(() to test if )
3.  If % halts then output same result.”

Corollary: If ! ≤#  $  and ! is undecidable then so is $

Theorem:  If ! ≤#  $  and $ is T-recognizable then so is !
Proof:  Same as above.
Corollary:  If ! ≤#  $  and ! is T-unrecognizable then so is $

Check-in 9.2
Suppose ! ≤#  $.
What can we conclude?

Check all that apply.
(a)  $ ≤#  !
(b)  ! ≤#  $
(c)  None of the above

6

Check-in 9.2

Mapping vs General Reducibility

Mapping Reducibility of ! to ":  Translate !-questions to "-questions.
- A special type of reducibility
- Useful to prove T-unrecognizability

!

'

"

(General) Reducibility of ! to ":  Use " solver to solve !.
- May be conceptually simpler
- Useful to prove undecidability

! solver

" solver

Noteworthy difference:
- ! is reducible to !
- ! may not be mapping reducible to !.
For example  !TM ≰& !TM

Check-in 9.3
We showed that if ! ≤&  " and
" is T-recognizable then so is !.

Is the same true if we use
general reducibility instead of
mapping reducibility?

(a)  Yes

(b)  No

7

Check-in 9.3

Reducibility – Templates

To prove ! is undecidable:
- Show undecidable " is reducible to !.  (often " is "TM )
- Template:  Assume TM % decides !.

Construct TM & deciding ".  Contradiction.

To prove ! is T-unrecognizable:
- Show T-unrecognizable " is mapping reducible to !.  (often " is "TM)
- Template:  give reduction function '.

8

!TM is T-unrecognizable

Recall  !TM = { &  | & is a TM and (  &  = ∅ }
Theorem:  !TM  is T-unrecognizable
Proof:  Show  +TM  ≤- !TM

Reduction function:  .  &, 0  =  &1
Explanation:  &, 0  ∈ +TM  iff  &1  ∈ !TM

Recall TM &1  = “On input 3

1.  If 3 ≠ 0, reject.
2.  else run & on 0
3.  Accept if & accepts.”

& rejects 0  iff  (  &1  = ∅

+TM

.

!TM

9

!"TM and !"TM are T-unrecognizable

!"TM =  &', &)  &' and &) are TMs and *  &'  = *(&)) }
Theorem:  Both !"TM and !"TM are T-unrecognizable
Proof: (1)  .TM ≤0 !"TM
(2)  .TM ≤0 !"TM

For any 1 let 23  = “On input 4
1.  Ignore 4.
2.  Simulate & on 1.”

23 acts on all inputs the way & acts on 1.

(1)  Here we give 5 which maps .TM problems (of the form  &, 1  )

to !"TM problems (of the form  2', 2)  ).
5  &, 1  = 〈23, 2reject〉

2reject  is a TM that always rejects.

(2)  Similarly 5  &, 1  = 〈23, 2accept 〉

2accept  always accepts.

10

Reducibility terminology

Why do we use the term “reduce”?
When we reduce ! to ", we show how to solve ! by using "
and conclude that ! is no harder than ".  (suggests the ≤$ notation)

Possibility 1:  We bring !’s difficulty down to "’s difficulty.
Possibility 2:  We bring "’s difficulty up to !’s difficulty.

11

Quick review of today

1.

Introduced The Reducibility Method to prove
undecidability and T-unrecognizability.

2.  Defined mapping reducibility as a type of reducibility.

3.  !TM is undecidable.

4.  !TM is T-unrecognizable.

5.  !$TM and !$TM are T-unrecognizable.

12

MIT OpenCourseWare
https://ocw.mit.edu

18.404J / 18.4041J / 6.840J Theory of Computation
Fall 2020

For information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms.

